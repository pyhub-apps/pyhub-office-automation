name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows-exe:
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1

    steps:
    - name: Configure PowerShell UTF-8 encoding
      shell: pwsh
      run: |
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::InputEncoding = [System.Text.Encoding]::UTF8
        $OutputEncoding = [System.Text.Encoding]::UTF8
        echo "PowerShell UTF-8 encoding configured"
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies and sync
      run: |
        uv sync --extra dev --extra build

    - name: Get version info
      id: version
      run: |
        $version = uv run python -c "import sys; sys.path.insert(0, 'pyhub_office_automation'); from version import get_version; print(get_version())"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Build executable
      shell: pwsh
      run: |
        # ErrorActionPreference를 Continue로 설정하여 작은 오류로 중단되지 않도록 함
        $ErrorActionPreference = "Continue"

        Write-Host "🔨 Starting build process..."

        # 빌드 실행 (메타데이터 생성 포함)
        $buildResult = & uv run pwsh -File build_windows.ps1 -BuildType onefile -CiMode -GenerateMetadata
        $buildExitCode = $LASTEXITCODE

        Write-Host "Build process completed with exit code: $buildExitCode"

        # 빌드가 실패한 경우에만 중단
        if ($buildExitCode -ne 0) {
            Write-Error "❌ Build failed with exit code: $buildExitCode"
            exit $buildExitCode
        }

    - name: Verify executable
      shell: pwsh
      run: |
        # 별도 단계로 분리하여 검증
        $ErrorActionPreference = "Stop"

        # 빌드 결과 검증
        $exePath = "./dist/oa.exe"
        if (-not (Test-Path $exePath)) {
            throw "Build failed: executable not found at $exePath"
        }

        # 파일 크기 확인
        $fileItem = Get-Item $exePath
        $sizeMB = [math]::Round($fileItem.Length / 1MB, 2)
        Write-Host "📊 Build verification:"
        Write-Host "   Executable location: $exePath"
        Write-Host "   Executable size: ${sizeMB} MB"

        # 크기 경고 (100MB 이상일 경우)
        if ($sizeMB -gt 100) {
            Write-Warning "⚠️ Executable size is larger than expected: ${sizeMB}MB"
        } else {
            Write-Host "✅ Executable size is acceptable: ${sizeMB}MB"
        }

        # 기본 기능 테스트
        Write-Host "🧪 Testing basic functionality:"

        # 버전 테스트 (중요: 실패해도 워크플로우 중단하지 않음)
        Write-Host "   Testing --version..."
        try {
            $versionOutput = & $exePath --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "   ✅ Version test passed: $versionOutput"
            } else {
                Write-Host "   ⚠️ Version test returned non-zero exit code: $LASTEXITCODE"
                Write-Host "   Output: $versionOutput"
            }
        } catch {
            Write-Host "   ⚠️ Version test threw exception: $($_.Exception.Message)"
        }

        # info 명령어는 Office 의존성으로 인해 CI 환경에서 스킵

        # 빌드 메타데이터 출력
        if (Test-Path "build-metadata.json") {
            Write-Host "📋 Build metadata:"
            try {
                $metadata = Get-Content "build-metadata.json" | ConvertFrom-Json
                Write-Host "   Version: $($metadata.BuildInfo.Version)"
                Write-Host "   Build Time: $($metadata.BuildInfo.BuildTime)"
                Write-Host "   SHA256: $($metadata.FileInfo.SHA256.Substring(0, 16))..."
                Write-Host "   File Size: $($metadata.FileInfo.SizeMB) MB"
            } catch {
                Write-Host "   ⚠️ Could not parse metadata: $($_.Exception.Message)"
            }
        }

        Write-Host "✅ Build verification completed successfully"

        # 성공적인 완료를 명시적으로 표시
        exit 0

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## pyhub-office-automation ${{ github.ref_name }}

          ### Changes
          - Windows executable build
          - Version: ${{ steps.version.outputs.VERSION }}
          - HeadVer format: {head}.{yearweek}.{build}

          ### Installation
          1. Download `oa.exe`
          2. Run the executable directly (no Python installation required)
          3. Use `oa.exe --help` for available commands

          ### System Requirements
          - Windows 10/11
          - For Excel automation: Microsoft Excel installed
          - For HWP automation: 한글(HWP) program installed

          ### Usage
          ```
          oa.exe --version
          oa.exe info
          oa.exe install-guide
          oa.exe excel list
          oa.exe hwp list
          ```
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/oa.exe
        asset_name: oa.exe
        asset_content_type: application/octet-stream