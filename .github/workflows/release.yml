name: Build and Release All

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-python:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          uv sync --extra dev --extra build
          uv pip install build twine

      - name: Build package
        run: uv run python -m build --wheel

      - name: Upload Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-wheel
          path: dist/*.whl
          retention-days: 5

  build-windows:
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1

    steps:
    - name: Configure PowerShell UTF-8 encoding
      shell: pwsh
      run: |
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::InputEncoding = [System.Text.Encoding]::UTF8
        $OutputEncoding = [System.Text.Encoding]::UTF8
        echo "PowerShell UTF-8 encoding configured"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies and sync
      run: |
        uv sync --extra dev --extra build

    - name: Get version info
      id: version
      run: |
        $version = uv run python -c "import sys; sys.path.insert(0, 'pyhub_office_automation'); from version import get_version; print(get_version())"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Build executable
      shell: pwsh
      run: |
        # ErrorActionPreferenceÎ•º ContinueÎ°ú ÏÑ§Ï†ïÌïòÏó¨ ÏûëÏùÄ Ïò§Î•òÎ°ú Ï§ëÎã®ÎêòÏßÄ ÏïäÎèÑÎ°ù Ìï®
        $ErrorActionPreference = "Continue"

        Write-Host "üî® Starting build process..."

        # ÎπåÎìú Ïã§Ìñâ (Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ìè¨Ìï®)
        $buildResult = & uv run pwsh -File build_windows.ps1 -BuildType onefile -CiMode -GenerateMetadata
        $buildExitCode = $LASTEXITCODE

        Write-Host "Build process completed with exit code: $buildExitCode"

        # ÎπåÎìúÍ∞Ä Ïã§Ìå®Ìïú Í≤ΩÏö∞ÏóêÎßå Ï§ëÎã®
        if ($buildExitCode -ne 0) {
            Write-Error "‚ùå Build failed with exit code: $buildExitCode"
            exit $buildExitCode
        }

    - name: Verify executable
      shell: pwsh
      run: |
        # Î≥ÑÎèÑ Îã®Í≥ÑÎ°ú Î∂ÑÎ¶¨ÌïòÏó¨ Í≤ÄÏ¶ù
        $ErrorActionPreference = "Stop"

        # ÎπåÎìú Í≤∞Í≥º Í≤ÄÏ¶ù
        $exePath = "./dist/oa.exe"
        if (-not (Test-Path $exePath)) {
            throw "Build failed: executable not found at $exePath"
        }

        # ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏
        $fileItem = Get-Item $exePath
        $sizeMB = [math]::Round($fileItem.Length / 1MB, 2)
        Write-Host "üìä Build verification:"
        Write-Host "   Executable location: $exePath"
        Write-Host "   Executable size: ${sizeMB} MB"

        # ÌÅ¨Í∏∞ Í≤ΩÍ≥† (100MB Ïù¥ÏÉÅÏùº Í≤ΩÏö∞)
        if ($sizeMB -gt 100) {
            Write-Warning "‚ö†Ô∏è Executable size is larger than expected: ${sizeMB}MB"
        } else {
            Write-Host "‚úÖ Executable size is acceptable: ${sizeMB}MB"
        }

        # Í∏∞Î≥∏ Í∏∞Îä• ÌÖåÏä§Ìä∏
        Write-Host "üß™ Testing basic functionality:"

        # Î≤ÑÏ†Ñ ÌÖåÏä§Ìä∏ (Ï§ëÏöî: Ïã§Ìå®Ìï¥ÎèÑ ÏõåÌÅ¨ÌîåÎ°úÏö∞ Ï§ëÎã®ÌïòÏßÄ ÏïäÏùå)
        Write-Host "   Testing --version..."
        try {
            $versionOutput = & $exePath --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "   ‚úÖ Version test passed: $versionOutput"
            } else {
                Write-Host "   ‚ö†Ô∏è Version test returned non-zero exit code: $LASTEXITCODE"
                Write-Host "   Output: $versionOutput"
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è Version test threw exception: $($_.Exception.Message)"
        }

        # info Î™ÖÎ†πÏñ¥Îäî Office ÏùòÏ°¥ÏÑ±ÏúºÎ°ú Ïù∏Ìï¥ CI ÌôòÍ≤ΩÏóêÏÑú Ïä§ÌÇµ

        # ÎπåÎìú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
        if (Test-Path "build-metadata.json") {
            Write-Host "üìã Build metadata:"
            try {
                $metadata = Get-Content "build-metadata.json" | ConvertFrom-Json
                Write-Host "   Version: $($metadata.BuildInfo.Version)"
                Write-Host "   Build Time: $($metadata.BuildInfo.BuildTime)"
                Write-Host "   SHA256: $($metadata.FileInfo.SHA256.Substring(0, 16))..."
                Write-Host "   File Size: $($metadata.FileInfo.SizeMB) MB"
            } catch {
                Write-Host "   ‚ö†Ô∏è Could not parse metadata: $($_.Exception.Message)"
            }
        }

        Write-Host "‚úÖ Build verification completed successfully"

        # ÏÑ±Í≥µÏ†ÅÏù∏ ÏôÑÎ£åÎ•º Î™ÖÏãúÏ†ÅÏúºÎ°ú ÌëúÏãú
        exit 0

    - name: Compress executable
      shell: pwsh
      run: |
        $ErrorActionPreference = "Stop"

        Write-Host "üì¶ Compressing executable for release..."

        # ÏïïÏ∂ï ÌååÏùºÎ™Ö ÏÑ§Ï†ï (ÌëúÏ§Ä Î™ÖÎ™Ö Í∑úÏπô: project-os-arch.extension)
        $zipName = "oa-windows-amd64.zip"
        $exePath = "./dist/oa.exe"
        $zipPath = "./dist/$zipName"

        # Ïã§Ìñâ ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
        if (-not (Test-Path $exePath)) {
            throw "Executable not found at $exePath"
        }

        # Í∏∞Ï°¥ ZIP ÌååÏùº Ï†úÍ±∞ (ÏûàÎã§Î©¥)
        if (Test-Path $zipPath) {
            Remove-Item $zipPath -Force
            Write-Host "   Removed existing zip file"
        }

        # ZIP ÏïïÏ∂ï ÏÉùÏÑ±
        Compress-Archive -Path $exePath -DestinationPath $zipPath -CompressionLevel Optimal

        # ÏïïÏ∂ï Í≤∞Í≥º Í≤ÄÏ¶ù Î∞è Ï†ïÎ≥¥ Ï∂úÎ†•
        if (Test-Path $zipPath) {
            $originalSize = (Get-Item $exePath).Length
            $compressedSize = (Get-Item $zipPath).Length
            $compressionRatio = [math]::Round((1 - ($compressedSize / $originalSize)) * 100, 1)

            Write-Host "‚úÖ Compression completed successfully:"
            Write-Host "   üìÑ Original file: $(Split-Path $exePath -Leaf) ($('{0:N2}' -f ($originalSize / 1MB)) MB)"
            Write-Host "   üì¶ Compressed file: $zipName ($('{0:N2}' -f ($compressedSize / 1MB)) MB)"
            Write-Host "   üíæ Compression ratio: $compressionRatio%"
        } else {
            throw "Failed to create compressed file at $zipPath"
        }

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: ./dist/oa-windows-amd64.zip
        retention-days: 5

  create-release:
    needs: [build-python, build-windows]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-wheel
          path: ./dist/

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-executable
          path: ./dist/

      - name: Check if pre-release
        id: check_prerelease
        run: |
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(a|b|rc)[0-9]+$ ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Get version info
        id: version
        run: |
          # Python ÌôòÍ≤Ω ÏÑ§Ï†ï ÏóÜÏù¥ Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º ÌÉúÍ∑∏ÏóêÏÑú Ï∂îÏ∂ú
          version="${{ github.ref_name }}"
          version="${version#v}"  # v Ï†ëÎëêÏÇ¨ Ï†úÍ±∞
          echo "VERSION=$version" >> $GITHUB_OUTPUT
          echo "Version: $version"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.whl
            dist/*.zip
          generate_release_notes: true
          prerelease: ${{ steps.check_prerelease.outputs.prerelease }}
          body: |
            ## pyhub-office-automation ${{ github.ref_name }}

            ### Installation

            **Python Package:**
            ```bash
            pip install pyhub-office-automation
            ```

            **Windows Executable:**
            1. Download `oa-windows-amd64.zip`
            2. Extract the ZIP file to get `oa.exe`
            3. Run the executable directly (no Python installation required)

            ### Usage
            ```bash
            # Python package
            oa --version
            oa info
            oa install-guide
            oa excel list
            oa hwp list

            # Windows executable
            oa.exe --version
            oa.exe info
            oa.exe install-guide
            oa.exe excel list
            oa.exe hwp list
            ```

            ### Downloads
            - **Python Package**: `pyhub_office_automation-${{ steps.version.outputs.VERSION }}-py3-none-any.whl`
            - **Windows Executable**: `oa-windows-amd64.zip`

            ### System Requirements
            - **Python package**: Python 3.13+, Windows 10/11 (for full functionality)
            - **Windows executable**: Windows 10/11 (AMD64 architecture)
            - For Excel automation: Microsoft Excel installed
            - For HWP automation: ÌïúÍ∏Ä(HWP) program installed

            ### What's Included
            This unified release includes both the Python package and Windows executable:
            - üêç **Python Package**: Install via pip for development and automation scripts
            - üíª **Windows Executable**: Standalone executable for end users
            - üì¶ **Compressed**: ZIP format for faster download
            - üîí **Verified**: Both builds tested and verified before release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python for PyPI
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          uv pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          uv run twine upload --verbose dist/*.whl