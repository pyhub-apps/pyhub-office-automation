name: Build and Release Windows Executable

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-windows-exe:
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1

    steps:
    - name: Configure PowerShell UTF-8 encoding
      shell: pwsh
      run: |
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        [Console]::InputEncoding = [System.Text.Encoding]::UTF8
        $OutputEncoding = [System.Text.Encoding]::UTF8
        echo "PowerShell UTF-8 encoding configured"
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies and sync
      run: |
        uv sync --extra dev --extra build

    - name: Get version info
      id: version
      run: |
        $version = uv run python -c "import sys; sys.path.insert(0, 'pyhub_office_automation'); from version import get_version; print(get_version())"
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Build and verify executable
      shell: pwsh
      run: |
        # ÎπåÎìú Ïã§Ìñâ (Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± Ìè¨Ìï®)
        uv run pwsh -File build_windows.ps1 -BuildType onefile -CiMode -GenerateMetadata

        # ÎπåÎìú Í≤∞Í≥º Í≤ÄÏ¶ù
        $exePath = "./dist/oa.exe"
        if (-not (Test-Path $exePath)) {
            throw "Build failed: executable not found at $exePath"
        }

        # ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏
        $fileItem = Get-Item $exePath
        $sizeMB = [math]::Round($fileItem.Length / 1MB, 2)
        Write-Host "üìä Build verification:"
        Write-Host "   Executable size: ${sizeMB} MB"

        # ÌÅ¨Í∏∞ Í≤ΩÍ≥† (100MB Ïù¥ÏÉÅÏùº Í≤ΩÏö∞)
        if ($sizeMB -gt 100) {
            Write-Warning "‚ö†Ô∏è Executable size is larger than expected: ${sizeMB}MB"
        } else {
            Write-Host "‚úÖ Executable size is acceptable: ${sizeMB}MB"
        }

        # Í∏∞Î≥∏ Í∏∞Îä• ÌÖåÏä§Ìä∏
        Write-Host "üß™ Testing basic functionality:"

        # Î≤ÑÏ†Ñ ÌÖåÏä§Ìä∏
        Write-Host "   Testing --version..."
        $versionOutput = & $exePath --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Version test passed: $versionOutput"
        } else {
            Write-Warning "   ‚ö†Ô∏è Version test failed with exit code: $LASTEXITCODE"
        }

        # info Î™ÖÎ†πÏñ¥ ÌÖåÏä§Ìä∏
        Write-Host "   Testing info command..."
        $infoOutput = & $exePath info --format json 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "   ‚úÖ Info command test passed"
        } else {
            Write-Host "   ‚ÑπÔ∏è Info command test failed (expected - Office not installed): $infoOutput"
        }

        # ÎπåÎìú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
        if (Test-Path "build-metadata.json") {
            Write-Host "üìã Build metadata:"
            $metadata = Get-Content "build-metadata.json" | ConvertFrom-Json
            Write-Host "   Version: $($metadata.BuildInfo.Version)"
            Write-Host "   Build Time: $($metadata.BuildInfo.BuildTime)"
            Write-Host "   SHA256: $($metadata.FileInfo.SHA256.Substring(0, 16))..."
            Write-Host "   File Size: $($metadata.FileInfo.SizeMB) MB"
        }

        Write-Host "‚úÖ Build verification completed successfully"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## pyhub-office-automation ${{ github.ref_name }}

          ### Changes
          - Windows executable build
          - Version: ${{ steps.version.outputs.VERSION }}
          - HeadVer format: {head}.{yearweek}.{build}

          ### Installation
          1. Download `oa.exe`
          2. Run the executable directly (no Python installation required)
          3. Use `oa.exe --help` for available commands

          ### System Requirements
          - Windows 10/11
          - For Excel automation: Microsoft Excel installed
          - For HWP automation: ÌïúÍ∏Ä(HWP) program installed

          ### Usage
          ```
          oa.exe --version
          oa.exe info
          oa.exe install-guide
          oa.exe excel list
          oa.exe hwp list
          ```
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/oa.exe
        asset_name: oa.exe
        asset_content_type: application/octet-stream