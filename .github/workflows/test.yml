name: Tests (Windows)

# Windows 전용 테스트 - Excel/HWP 자동화 기능이 Windows에서만 완전 지원됨
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.13']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install package in development mode
      run: |
        pip install -e .

    - name: Test CLI installation and commands
      run: |
        oa --version
        oa info --format json
        oa excel list --format json
        oa install-guide --format json
        oa excel create-workbook --help
        oa excel open-workbook --help

    - name: Test new shape and slicer commands (help only)
      run: |
        oa excel shape-add --help
        oa excel shape-list --help
        oa excel shape-delete --help
        oa excel shape-format --help
        oa excel textbox-add --help
        oa excel shape-group --help
        oa excel slicer-add --help
        oa excel slicer-list --help
        oa excel slicer-connect --help
        oa excel slicer-position --help

    - name: Test shape and slicer commands with mock data (if Excel available)
      run: |
        # Excel이 설치된 경우에만 실제 테스트 수행
        try {
          oa excel workbook-create --save-path "test_shapes.xlsx" --name "TestWorkbook"
          Write-Host "Excel available - testing shape commands"
          oa excel shape-list --file-path "test_shapes.xlsx" --format json
          Write-Host "Shape commands test completed"
          Remove-Item -Path "test_shapes.xlsx" -Force -ErrorAction SilentlyContinue
        } catch {
          Write-Host "Excel not available - skipping Excel-dependent tests"
          Write-Host "Error: $($_.Exception.Message)"
        }

    - name: Install test dependencies
      run: |
        pip install pytest pytest-cov pytest-mock

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=pyhub_office_automation --cov-report=term-missing --cov-report=xml

    - name: Test version system
      run: |
        python -c "from pyhub_office_automation.version import get_version_info; import json; print(json.dumps(get_version_info(), indent=2))"

  lint:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Check code formatting with black
      run: |
        black --check pyhub_office_automation/

    - name: Check import sorting with isort
      run: |
        isort --check-only pyhub_office_automation/

    - name: Lint with flake8
      run: |
        flake8 pyhub_office_automation/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 pyhub_office_automation/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics